HloModule pmap_simulate_until_output.597

%fused_computation (param_0: f32[1032,1024], param_1.25: f32[1032,1024]) -> (f32[1032,1024], f32[1032,1024]) {
  %param_0 = f32[1032,1024]{1,0} parameter(0)
  %param_1.25 = f32[1032,1024]{1,0} parameter(1)
  %slice.361.clone.1 = f32[1031,1024]{1,0} slice(f32[1032,1024]{1,0} %param_0), slice={[1:1032], [0:1024]}, metadata={op_type="gather" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/gather[ dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(), start_index_map=(0,))\n                                                                                                  indices_are_sorted=True\n                                                                                                  slice_sizes=(1031, 1024)\n                                                                                                  unique_indices=True ]" source_file="wave_equation.py" source_line=43}
  %constant_1865_clone_1 = f32[] constant(0), metadata={op_type="gather" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/jit(_pad)/gather[ dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0, 1), start_index_map=(0, 1))\n                                                                                                            indices_are_sorted=True\n                                                                                                            slice_sizes=(1, 1)\n                                                                                                            unique_indices=True ]" source_file="wave_equation.py" source_line=109}
  %pad.106.clone.1 = f32[1032,1024]{1,0} pad(f32[1031,1024]{1,0} %slice.361.clone.1, f32[] %constant_1865_clone_1), padding=0_1x0_0, metadata={op_type="pad" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/jit(_pad)/pad[ padding_config=((0, 1, 0), (0, 0, 0)) ]" source_file="wave_equation.py" source_line=109}
  %slice.360.clone.1 = f32[1031,1024]{1,0} slice(f32[1032,1024]{1,0} %param_0), slice={[0:1031], [0:1024]}, metadata={op_type="gather" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/gather[ dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(), start_index_map=(0,))\n                                                                                                  indices_are_sorted=True\n                                                                                                  slice_sizes=(1031, 1024)\n                                                                                                  unique_indices=True ]" source_file="wave_equation.py" source_line=43}
  %pad.105.clone.1 = f32[1032,1024]{1,0} pad(f32[1031,1024]{1,0} %slice.360.clone.1, f32[] %constant_1865_clone_1), padding=1_0x0_0, metadata={op_type="pad" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/jit(_pad)/pad[ padding_config=((1, 0, 0), (0, 0, 0)) ]" source_file="wave_equation.py" source_line=109}
  %add.225.clone.1 = f32[1032,1024]{1,0} add(f32[1032,1024]{1,0} %pad.106.clone.1, f32[1032,1024]{1,0} %pad.105.clone.1), metadata={op_type="add" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/add" source_file="wave_equation.py" source_line=116}
  %slice.359.clone.1 = f32[1032,1023]{1,0} slice(f32[1032,1024]{1,0} %param_0), slice={[0:1032], [1:1024]}, metadata={op_type="gather" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/gather[ dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(), start_index_map=(1,))\n                                                                                                  indices_are_sorted=True\n                                                                                                  slice_sizes=(1032, 1023)\n                                                                                                  unique_indices=True ]" source_file="wave_equation.py" source_line=43}
  %pad.104.clone.1 = f32[1032,1024]{1,0} pad(f32[1032,1023]{1,0} %slice.359.clone.1, f32[] %constant_1865_clone_1), padding=0_0x0_1, metadata={op_type="pad" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/jit(_pad)/pad[ padding_config=((0, 0, 0), (0, 1, 0)) ]" source_file="wave_equation.py" source_line=109}
  %add.224.clone.1 = f32[1032,1024]{1,0} add(f32[1032,1024]{1,0} %add.225.clone.1, f32[1032,1024]{1,0} %pad.104.clone.1), metadata={op_type="add" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/add" source_file="wave_equation.py" source_line=116}
  %slice.358.clone.1 = f32[1032,1023]{1,0} slice(f32[1032,1024]{1,0} %param_0), slice={[0:1032], [0:1023]}, metadata={op_type="gather" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/gather[ dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(), start_index_map=(1,))\n                                                                                                  indices_are_sorted=True\n                                                                                                  slice_sizes=(1032, 1023)\n                                                                                                  unique_indices=True ]" source_file="wave_equation.py" source_line=43}
  %pad.103.clone.1 = f32[1032,1024]{1,0} pad(f32[1032,1023]{1,0} %slice.358.clone.1, f32[] %constant_1865_clone_1), padding=0_0x1_0, metadata={op_type="pad" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/jit(_pad)/pad[ padding_config=((0, 0, 0), (1, 0, 0)) ]" source_file="wave_equation.py" source_line=109}
  %add.222.clone.1 = f32[1032,1024]{1,0} add(f32[1032,1024]{1,0} %add.224.clone.1, f32[1032,1024]{1,0} %pad.103.clone.1), metadata={op_type="add" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/add" source_file="wave_equation.py" source_line=116}
  %constant_1864_clone_1 = f32[] constant(4), metadata={op_type="mul" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/mul" source_file="wave_equation.py" source_line=116}
  %broadcast.772.clone.1 = f32[1032,1024]{1,0} broadcast(f32[] %constant_1864_clone_1), dimensions={}, metadata={op_type="mul" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/mul" source_file="wave_equation.py" source_line=116}
  %multiply.16.clone.1 = f32[1032,1024]{1,0} multiply(f32[1032,1024]{1,0} %param_0, f32[1032,1024]{1,0} %broadcast.772.clone.1), metadata={op_type="mul" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/mul" source_file="wave_equation.py" source_line=116}
  %subtract.2.clone.1 = f32[1032,1024]{1,0} subtract(f32[1032,1024]{1,0} %add.222.clone.1, f32[1032,1024]{1,0} %multiply.16.clone.1), metadata={op_type="sub" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/sub" source_file="wave_equation.py" source_line=116}
  %constant_1866 = f32[] constant(0.5), metadata={op_type="xla_call" op_name="pmap(simulate_until_output)/scan/while/body/xla_call[ backend=None\n                                                      device=None\n                                                      donated_invars=(False, False, False, False, False)\n                                                      inline=False\n                                                      name=multi_step ]" source_file="wave_equation.py" source_line=144}
  %broadcast.776.clone.1 = f32[1032,1024]{1,0} broadcast(f32[] %constant_1866), dimensions={}, metadata={op_type="mul" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/mul" source_file="wave_equation.py" source_line=129}
  %multiply.15.clone.1 = f32[1032,1024]{1,0} multiply(f32[1032,1024]{1,0} %subtract.2.clone.1, f32[1032,1024]{1,0} %broadcast.776.clone.1), metadata={op_type="mul" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/mul" source_file="wave_equation.py" source_line=129}
  %add.221.clone.1 = f32[1032,1024]{1,0} add(f32[1032,1024]{1,0} %param_1.25, f32[1032,1024]{1,0} %multiply.15.clone.1), metadata={op_type="add" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/add" source_file="wave_equation.py" source_line=129}
  %multiply.14 = f32[1032,1024]{1,0} multiply(f32[1032,1024]{1,0} %add.221.clone.1, f32[1032,1024]{1,0} %broadcast.776.clone.1), metadata={op_type="mul" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/mul" source_file="wave_equation.py" source_line=130}
  %add.220 = f32[1032,1024]{1,0} add(f32[1032,1024]{1,0} %param_0, f32[1032,1024]{1,0} %multiply.14), metadata={op_type="add" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/add" source_file="wave_equation.py" source_line=130}
  ROOT %tuple.320 = (f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) tuple(f32[1032,1024]{1,0} %add.220, f32[1032,1024]{1,0} %add.221.clone.1)
}

%body_computation__2.448.clone (parameter.0: (s32[], f32[1032,1024], f32[1032,1024])) -> (s32[], f32[1032,1024], f32[1032,1024]) {
  %parameter.0 = (s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) parameter(0)
  %get-tuple-element.752 = s32[] get-tuple-element((s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) %parameter.0), index=0
  %constant_1088 = s32[] constant(1), metadata={op_type="add" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/add" source_file="wave_equation.py" source_line=137}
  %add.131 = s32[] add(s32[] %get-tuple-element.752, s32[] %constant_1088), metadata={op_type="add" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/add" source_file="wave_equation.py" source_line=137}
  %get-tuple-element.753 = f32[1032,1024]{1,0} get-tuple-element((s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) %parameter.0), index=1
  %get-tuple-element.754 = f32[1032,1024]{1,0} get-tuple-element((s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) %parameter.0), index=2
  %fusion = (f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) fusion(f32[1032,1024]{1,0} %get-tuple-element.753, f32[1032,1024]{1,0} %get-tuple-element.754), kind=kLoop, calls=%fused_computation, metadata={op_type="add" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/body/jit(leapfrog_step)/add" source_file="wave_equation.py" source_line=130}
  %get-tuple-element.747 = f32[1032,1024]{1,0} get-tuple-element((f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) %fusion), index=0
  %copy.7 = f32[1032,1024]{1,0} copy(f32[1032,1024]{1,0} %get-tuple-element.747)
  %get-tuple-element.748 = f32[1032,1024]{1,0} get-tuple-element((f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) %fusion), index=1
  ROOT %tuple.323 = (s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) tuple(s32[] %add.131, f32[1032,1024]{1,0} %copy.7, f32[1032,1024]{1,0} %get-tuple-element.748)
}

%cond_computation__2.463.clone (parameter.3: (s32[], f32[1032,1024], f32[1032,1024])) -> pred[] {
  %parameter.3 = (s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) parameter(0)
  %get-tuple-element.496 = s32[] get-tuple-element((s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) %parameter.3), index=0
  %constant_1410 = s32[] constant(4), metadata={op_type="xla_call" op_name="pmap(simulate_until_output)/scan/while/body/xla_call[ backend=None\n                                                      device=None\n                                                      donated_invars=(False, False, False, False, False)\n                                                      inline=False\n                                                      name=multi_step ]" source_file="wave_equation.py" source_line=144}
  ROOT %compare.148 = pred[] compare(s32[] %get-tuple-element.496, s32[] %constant_1410), direction=LT, metadata={op_type="lt" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while/cond/lt" source_file="wave_equation.py" source_line=137}
}

%fused_computation.2 (param_0.2: f32[1032,1024], param_1.19: f32[4,1024], param_2.17: pred[]) -> f32[1032,1024] {
  %param_0.2 = f32[1032,1024]{1,0} parameter(0)
  %param_2.17 = pred[] parameter(2)
  %broadcast.777 = pred[4,1024]{1,0} broadcast(pred[] %param_2.17), dimensions={}
  %param_1.19 = f32[4,1024]{1,0} parameter(1)
  %slice.362 = f32[4,1024]{1,0} slice(f32[1032,1024]{1,0} %param_0.2), slice={[1028:1032], [0:1024]}
  %select.124 = f32[4,1024]{1,0} select(pred[4,1024]{1,0} %broadcast.777, f32[4,1024]{1,0} %param_1.19, f32[4,1024]{1,0} %slice.362)
  %constant_1868 = s32[] constant(1028)
  %constant_1869 = s32[] constant(0), metadata={op_type="while" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while[ body_nconsts=2\n                                                                   cond_nconsts=0 ]" source_file="wave_equation.py" source_line=137}
  ROOT %dynamic-update-slice.50 = f32[1032,1024]{1,0} dynamic-update-slice(f32[1032,1024]{1,0} %param_0.2, f32[4,1024]{1,0} %select.124, s32[] %constant_1868, s32[] %constant_1869), metadata={op_type="scatter" op_name="pmap(simulate_until_output)/scan/while/body/scatter[ dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(0,))\n                                                     indices_are_sorted=False\n                                                     unique_indices=True\n                                                     update_consts=(  ) ]" source_file="wave_equation.py" source_line=69}
}

%fused_computation.3 (param_0.3: f32[1032,1024], param_1.20: f32[4,1024], param_2.19: pred[]) -> f32[1032,1024] {
  %param_0.3 = f32[1032,1024]{1,0} parameter(0)
  %param_2.19 = pred[] parameter(2)
  %broadcast.778 = pred[4,1024]{1,0} broadcast(pred[] %param_2.19), dimensions={}
  %param_1.20 = f32[4,1024]{1,0} parameter(1)
  %slice.363 = f32[4,1024]{1,0} slice(f32[1032,1024]{1,0} %param_0.3), slice={[0:4], [0:1024]}
  %select.125 = f32[4,1024]{1,0} select(pred[4,1024]{1,0} %broadcast.778, f32[4,1024]{1,0} %param_1.20, f32[4,1024]{1,0} %slice.363)
  %constant_1870 = s32[] constant(0), metadata={op_type="while" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while[ body_nconsts=2\n                                                                   cond_nconsts=0 ]" source_file="wave_equation.py" source_line=137}
  ROOT %dynamic-update-slice.51 = f32[1032,1024]{1,0} dynamic-update-slice(f32[1032,1024]{1,0} %param_0.3, f32[4,1024]{1,0} %select.125, s32[] %constant_1870, s32[] %constant_1870), metadata={op_type="scatter" op_name="pmap(simulate_until_output)/scan/while/body/scatter[ dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(0,))\n                                                     indices_are_sorted=False\n                                                     unique_indices=True\n                                                     update_consts=(  ) ]" source_file="wave_equation.py" source_line=67}
}

%fused_computation.4 (param_0.4: f32[1032,1024], param_1.22: f32[4,1024], param_2.21: pred[]) -> f32[1032,1024] {
  %param_0.4 = f32[1032,1024]{1,0} parameter(0)
  %param_2.21 = pred[] parameter(2)
  %broadcast.779 = pred[4,1024]{1,0} broadcast(pred[] %param_2.21), dimensions={}
  %param_1.22 = f32[4,1024]{1,0} parameter(1)
  %slice.364 = f32[4,1024]{1,0} slice(f32[1032,1024]{1,0} %param_0.4), slice={[1028:1032], [0:1024]}
  %select.126 = f32[4,1024]{1,0} select(pred[4,1024]{1,0} %broadcast.779, f32[4,1024]{1,0} %param_1.22, f32[4,1024]{1,0} %slice.364)
  %constant_1871 = s32[] constant(1028)
  %constant_1872 = s32[] constant(0), metadata={op_type="while" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while[ body_nconsts=2\n                                                                   cond_nconsts=0 ]" source_file="wave_equation.py" source_line=137}
  ROOT %dynamic-update-slice.52 = f32[1032,1024]{1,0} dynamic-update-slice(f32[1032,1024]{1,0} %param_0.4, f32[4,1024]{1,0} %select.126, s32[] %constant_1871, s32[] %constant_1872), metadata={op_type="scatter" op_name="pmap(simulate_until_output)/scan/while/body/scatter[ dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(0,))\n                                                     indices_are_sorted=False\n                                                     unique_indices=True\n                                                     update_consts=(  ) ]" source_file="wave_equation.py" source_line=69}
}

%and.reduce_sub_computation.1 (lhs.1: pred[], rhs.1: pred[]) -> pred[] {
  %lhs.1 = pred[] parameter(0)
  %rhs.1 = pred[] parameter(1)
  ROOT %and.2 = pred[] and(pred[] %lhs.1, pred[] %rhs.1)
}

%fused_computation.5 (param_0.10: s32[2]) -> pred[] {
  %constant_1874 = s32[] constant(0), metadata={op_type="while" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while[ body_nconsts=2\n                                                                   cond_nconsts=0 ]" source_file="wave_equation.py" source_line=137}
  %broadcast.773 = s32[2]{0} broadcast(s32[] %constant_1874), dimensions={}
  %param_0.10 = s32[2]{0} parameter(0)
  %compare.189 = pred[2]{0} compare(s32[2]{0} %broadcast.773, s32[2]{0} %param_0.10), direction=LE
  %constant_1873 = pred[] constant(true)
  ROOT %reduce.20 = pred[] reduce(pred[2]{0} %compare.189, pred[] %constant_1873), dimensions={0}, to_apply=%and.reduce_sub_computation.1
}

%fused_computation.6 (param_0.7: f32[1032,1024], param_1.24: f32[4,1024], param_2.23: pred[]) -> f32[1032,1024] {
  %param_0.7 = f32[1032,1024]{1,0} parameter(0)
  %param_2.23 = pred[] parameter(2)
  %broadcast.780 = pred[4,1024]{1,0} broadcast(pred[] %param_2.23), dimensions={}
  %param_1.24 = f32[4,1024]{1,0} parameter(1)
  %slice.365 = f32[4,1024]{1,0} slice(f32[1032,1024]{1,0} %param_0.7), slice={[0:4], [0:1024]}
  %select.127 = f32[4,1024]{1,0} select(pred[4,1024]{1,0} %broadcast.780, f32[4,1024]{1,0} %param_1.24, f32[4,1024]{1,0} %slice.365)
  %constant_1875 = s32[] constant(0), metadata={op_type="while" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while[ body_nconsts=2\n                                                                   cond_nconsts=0 ]" source_file="wave_equation.py" source_line=137}
  ROOT %dynamic-update-slice.53 = f32[1032,1024]{1,0} dynamic-update-slice(f32[1032,1024]{1,0} %param_0.7, f32[4,1024]{1,0} %select.127, s32[] %constant_1875, s32[] %constant_1875), metadata={op_type="scatter" op_name="pmap(simulate_until_output)/scan/while/body/scatter[ dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(0,))\n                                                     indices_are_sorted=False\n                                                     unique_indices=True\n                                                     update_consts=(  ) ]" source_file="wave_equation.py" source_line=67}
}

%and.reduce_sub_computation (lhs: pred[], rhs: pred[]) -> pred[] {
  %lhs = pred[] parameter(0)
  %rhs = pred[] parameter(1)
  ROOT %and = pred[] and(pred[] %lhs, pred[] %rhs)
}

%fused_computation.7 () -> pred[] {
  %constant_1876 = pred[] constant(true)
  %broadcast.774 = pred[2]{0} broadcast(pred[] %constant_1876), dimensions={}
  ROOT %reduce.21 = pred[] reduce(pred[2]{0} %broadcast.774, pred[] %constant_1876), dimensions={0}, to_apply=%and.reduce_sub_computation
}

%body_computation__1.511.clone.clone.clone (parameter.7: (s32[], f32[1032,1024], f32[1032,1024])) -> (s32[], f32[1032,1024], f32[1032,1024]) {
  %parameter.7 = (s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) parameter(0)
  %get-tuple-element.761 = s32[] get-tuple-element((s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) %parameter.7), index=0
  %constant_1786 = s32[] constant(1), metadata={op_type="add" op_name="pmap(simulate_until_output)/scan/while/body/add" source_file="wave_equation.py" source_line=97}
  %add.219 = s32[] add(s32[] %get-tuple-element.761, s32[] %constant_1786), metadata={op_type="add" op_name="pmap(simulate_until_output)/scan/while/body/add" source_file="wave_equation.py" source_line=97}
  %constant_1777 = s32[] constant(0), metadata={op_type="while" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while[ body_nconsts=2\n                                                                   cond_nconsts=0 ]" source_file="wave_equation.py" source_line=137}
  %copy.23 = s32[] copy(s32[] %constant_1777)
  %get-tuple-element.762 = f32[1032,1024]{1,0} get-tuple-element((s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) %parameter.7), index=1
  %get-tuple-element.763 = f32[1032,1024]{1,0} get-tuple-element((s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) %parameter.7), index=2
  %tuple.321 = (s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) tuple(s32[] %copy.23, f32[1032,1024]{1,0} %get-tuple-element.762, f32[1032,1024]{1,0} %get-tuple-element.763)
  %while.39 = (s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) while((s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) %tuple.321), condition=%cond_computation__2.463.clone, body=%body_computation__2.448.clone, backend_config="{\"known_trip_count\":{\"n\":\"4\"}}"
  %get-tuple-element.732 = f32[1032,1024]{1,0} get-tuple-element((s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) %while.39), index=1, metadata={op_type="while" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while[ body_nconsts=2\n                                                                   cond_nconsts=0 ]" source_file="wave_equation.py" source_line=137}
  %copy.9 = f32[1032,1024]{1,0} copy(f32[1032,1024]{1,0} %get-tuple-element.732)
  %slice.344 = f32[4,1024]{1,0} slice(f32[1032,1024]{1,0} %get-tuple-element.732), slice={[1024:1028], [0:1024]}, metadata={op_type="gather" op_name="pmap(simulate_until_output)/scan/while/body/gather[ dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(), start_index_map=(0,))\n                                                    indices_are_sorted=True\n                                                    slice_sizes=(4, 1024)\n                                                    unique_indices=True ]" source_file="wave_equation.py" source_line=43}
  %collective-permute.9 = f32[4,1024]{1,0} collective-permute(f32[4,1024]{1,0} %slice.344), source_target_pairs={{0,1},{1,2},{2,3},{3,4},{4,5},{5,6},{6,7}}, metadata={op_type="ppermute" op_name="pmap(simulate_until_output)/scan/while/body/ppermute[ axis_name=x\n                                                      perm=((0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)) ]" source_file="wave_equation.py" source_line=31}
  %fusion.7 = pred[] fusion(), kind=kLoop, calls=%fused_computation.7
  %fusion.6 = f32[1032,1024]{1,0} fusion(f32[1032,1024]{1,0} %copy.9, f32[4,1024]{1,0} %collective-permute.9, pred[] %fusion.7), kind=kLoop, calls=%fused_computation.6, metadata={op_type="scatter" op_name="pmap(simulate_until_output)/scan/while/body/scatter[ dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(0,))\n                                                     indices_are_sorted=False\n                                                     unique_indices=True\n                                                     update_consts=(  ) ]" source_file="wave_equation.py" source_line=67}
  %slice.346 = f32[4,1024]{1,0} slice(f32[1032,1024]{1,0} %get-tuple-element.732), slice={[4:8], [0:1024]}, metadata={op_type="gather" op_name="pmap(simulate_until_output)/scan/while/body/gather[ dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(), start_index_map=(0,))\n                                                    indices_are_sorted=True\n                                                    slice_sizes=(4, 1024)\n                                                    unique_indices=True ]" source_file="wave_equation.py" source_line=43}
  %collective-permute.8 = f32[4,1024]{1,0} collective-permute(f32[4,1024]{1,0} %slice.346), source_target_pairs={{1,0},{2,1},{3,2},{4,3},{5,4},{6,5},{7,6}}, metadata={op_type="ppermute" op_name="pmap(simulate_until_output)/scan/while/body/ppermute[ axis_name=x\n                                                      perm=((1, 0), (2, 1), (3, 2), (4, 3), (5, 4), (6, 5), (7, 6)) ]" source_file="wave_equation.py" source_line=35}
  %constant_1827 = s32[2]{0} constant({1028, 0})
  %fusion.5 = pred[] fusion(s32[2]{0} %constant_1827), kind=kLoop, calls=%fused_computation.5
  %fusion.4 = f32[1032,1024]{1,0} fusion(f32[1032,1024]{1,0} %fusion.6, f32[4,1024]{1,0} %collective-permute.8, pred[] %fusion.5), kind=kLoop, calls=%fused_computation.4, control-predecessors={%while.39}, metadata={op_type="scatter" op_name="pmap(simulate_until_output)/scan/while/body/scatter[ dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(0,))\n                                                     indices_are_sorted=False\n                                                     unique_indices=True\n                                                     update_consts=(  ) ]" source_file="wave_equation.py" source_line=69}
  %copy.20 = f32[1032,1024]{1,0} copy(f32[1032,1024]{1,0} %fusion.4)
  %get-tuple-element.731 = f32[1032,1024]{1,0} get-tuple-element((s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) %while.39), index=2, metadata={op_type="while" op_name="pmap(simulate_until_output)/scan/while/body/jit(multi_step)/while[ body_nconsts=2\n                                                                   cond_nconsts=0 ]" source_file="wave_equation.py" source_line=137}
  %copy.11 = f32[1032,1024]{1,0} copy(f32[1032,1024]{1,0} %get-tuple-element.731)
  %slice.348 = f32[4,1024]{1,0} slice(f32[1032,1024]{1,0} %get-tuple-element.731), slice={[1024:1028], [0:1024]}, metadata={op_type="gather" op_name="pmap(simulate_until_output)/scan/while/body/gather[ dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(), start_index_map=(0,))\n                                                    indices_are_sorted=True\n                                                    slice_sizes=(4, 1024)\n                                                    unique_indices=True ]" source_file="wave_equation.py" source_line=43}
  %collective-permute.11 = f32[4,1024]{1,0} collective-permute(f32[4,1024]{1,0} %slice.348), source_target_pairs={{0,1},{1,2},{2,3},{3,4},{4,5},{5,6},{6,7}}, metadata={op_type="ppermute" op_name="pmap(simulate_until_output)/scan/while/body/ppermute[ axis_name=x\n                                                      perm=((0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)) ]" source_file="wave_equation.py" source_line=31}
  %fusion.3 = f32[1032,1024]{1,0} fusion(f32[1032,1024]{1,0} %copy.11, f32[4,1024]{1,0} %collective-permute.11, pred[] %fusion.7), kind=kLoop, calls=%fused_computation.3, metadata={op_type="scatter" op_name="pmap(simulate_until_output)/scan/while/body/scatter[ dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(0,))\n                                                     indices_are_sorted=False\n                                                     unique_indices=True\n                                                     update_consts=(  ) ]" source_file="wave_equation.py" source_line=67}
  %slice.350 = f32[4,1024]{1,0} slice(f32[1032,1024]{1,0} %get-tuple-element.731), slice={[4:8], [0:1024]}, metadata={op_type="gather" op_name="pmap(simulate_until_output)/scan/while/body/gather[ dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(), start_index_map=(0,))\n                                                    indices_are_sorted=True\n                                                    slice_sizes=(4, 1024)\n                                                    unique_indices=True ]" source_file="wave_equation.py" source_line=43}
  %collective-permute.10 = f32[4,1024]{1,0} collective-permute(f32[4,1024]{1,0} %slice.350), source_target_pairs={{1,0},{2,1},{3,2},{4,3},{5,4},{6,5},{7,6}}, metadata={op_type="ppermute" op_name="pmap(simulate_until_output)/scan/while/body/ppermute[ axis_name=x\n                                                      perm=((1, 0), (2, 1), (3, 2), (4, 3), (5, 4), (6, 5), (7, 6)) ]" source_file="wave_equation.py" source_line=35}
  %fusion.2 = f32[1032,1024]{1,0} fusion(f32[1032,1024]{1,0} %fusion.3, f32[4,1024]{1,0} %collective-permute.10, pred[] %fusion.5), kind=kLoop, calls=%fused_computation.2, control-predecessors={%while.39}, metadata={op_type="scatter" op_name="pmap(simulate_until_output)/scan/while/body/scatter[ dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1), inserted_window_dims=(), scatter_dims_to_operand_dims=(0,))\n                                                     indices_are_sorted=False\n                                                     unique_indices=True\n                                                     update_consts=(  ) ]" source_file="wave_equation.py" source_line=69}
  %copy.21 = f32[1032,1024]{1,0} copy(f32[1032,1024]{1,0} %fusion.2)
  ROOT %tuple.326 = (s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) tuple(s32[] %add.219, f32[1032,1024]{1,0} %copy.20, f32[1032,1024]{1,0} %copy.21)
}

%cond_computation__1.565.clone.clone (parameter.8: (s32[], f32[1032,1024], f32[1032,1024])) -> pred[] {
  %parameter.8 = (s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) parameter(0)
  %get-tuple-element.739 = s32[] get-tuple-element((s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) %parameter.8), index=0
  %constant_1817 = s32[] constant(8192), metadata={op_type="lt" op_name="pmap(simulate_until_output)/scan/while/cond/lt" source_file="wave_equation.py" source_line=97}
  ROOT %compare.186 = pred[] compare(s32[] %get-tuple-element.739, s32[] %constant_1817), direction=LT, metadata={op_type="lt" op_name="pmap(simulate_until_output)/scan/while/cond/lt" source_file="wave_equation.py" source_line=97}
}

ENTRY %pmap_simulate_until_output.597 (parameter.1: f32[1024,1024], parameter.2: f32[1024,1024]) -> (f32[1024,1024], f32[1024,1024]) {
  %constant_28 = s32[] constant(0), metadata={op_type="while" op_name="pmap(simulate_until_output)/scan/while[ body_nconsts=0\n                                        cond_nconsts=0 ]" source_file="wave_equation.py" source_line=97}
  %copy.22 = s32[] copy(s32[] %constant_28)
  %parameter.1 = f32[1024,1024]{1,0} parameter(0), parameter_replication={false}
  %slice.352 = f32[4,1024]{1,0} slice(f32[1024,1024]{1,0} %parameter.1), slice={[1020:1024], [0:1024]}, metadata={op_type="gather" op_name="pmap(simulate_until_output)/gather[ dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(), start_index_map=(0,))\n                                    indices_are_sorted=True\n                                    slice_sizes=(4, 1024)\n                                    unique_indices=True ]" source_file="wave_equation.py" source_line=43}
  %collective-permute.13 = f32[4,1024]{1,0} collective-permute(f32[4,1024]{1,0} %slice.352), source_target_pairs={{0,1},{1,2},{2,3},{3,4},{4,5},{5,6},{6,7}}, metadata={op_type="ppermute" op_name="pmap(simulate_until_output)/ppermute[ axis_name=x\n                                      perm=((0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)) ]" source_file="wave_equation.py" source_line=31}
  %slice.353 = f32[4,1024]{1,0} slice(f32[1024,1024]{1,0} %parameter.1), slice={[0:4], [0:1024]}, metadata={op_type="gather" op_name="pmap(simulate_until_output)/gather[ dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(), start_index_map=(0,))\n                                    indices_are_sorted=True\n                                    slice_sizes=(4, 1024)\n                                    unique_indices=True ]" source_file="wave_equation.py" source_line=43}
  %collective-permute.12 = f32[4,1024]{1,0} collective-permute(f32[4,1024]{1,0} %slice.353), source_target_pairs={{1,0},{2,1},{3,2},{4,3},{5,4},{6,5},{7,6}}, metadata={op_type="ppermute" op_name="pmap(simulate_until_output)/ppermute[ axis_name=x\n                                      perm=((1, 0), (2, 1), (3, 2), (4, 3), (5, 4), (6, 5), (7, 6)) ]" source_file="wave_equation.py" source_line=35}
  %concatenate.14 = f32[1032,1024]{1,0} concatenate(f32[4,1024]{1,0} %collective-permute.13, f32[1024,1024]{1,0} %parameter.1, f32[4,1024]{1,0} %collective-permute.12), dimensions={0}, metadata={op_type="concatenate" op_name="pmap(simulate_until_output)/concatenate[ dimension=0 ]" source_file="wave_equation.py" source_line=60}
  %parameter.2 = f32[1024,1024]{1,0} parameter(1), parameter_replication={false}
  %slice.354 = f32[4,1024]{1,0} slice(f32[1024,1024]{1,0} %parameter.2), slice={[1020:1024], [0:1024]}, metadata={op_type="gather" op_name="pmap(simulate_until_output)/gather[ dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(), start_index_map=(0,))\n                                    indices_are_sorted=True\n                                    slice_sizes=(4, 1024)\n                                    unique_indices=True ]" source_file="wave_equation.py" source_line=43}
  %collective-permute.24 = f32[4,1024]{1,0} collective-permute(f32[4,1024]{1,0} %slice.354), source_target_pairs={{0,1},{1,2},{2,3},{3,4},{4,5},{5,6},{6,7}}, metadata={op_type="ppermute" op_name="pmap(simulate_until_output)/ppermute[ axis_name=x\n                                      perm=((0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)) ]" source_file="wave_equation.py" source_line=31}
  %slice.355 = f32[4,1024]{1,0} slice(f32[1024,1024]{1,0} %parameter.2), slice={[0:4], [0:1024]}, metadata={op_type="gather" op_name="pmap(simulate_until_output)/gather[ dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(), start_index_map=(0,))\n                                    indices_are_sorted=True\n                                    slice_sizes=(4, 1024)\n                                    unique_indices=True ]" source_file="wave_equation.py" source_line=43}
  %collective-permute.23 = f32[4,1024]{1,0} collective-permute(f32[4,1024]{1,0} %slice.355), source_target_pairs={{1,0},{2,1},{3,2},{4,3},{5,4},{6,5},{7,6}}, metadata={op_type="ppermute" op_name="pmap(simulate_until_output)/ppermute[ axis_name=x\n                                      perm=((1, 0), (2, 1), (3, 2), (4, 3), (5, 4), (6, 5), (7, 6)) ]" source_file="wave_equation.py" source_line=35}
  %concatenate.25 = f32[1032,1024]{1,0} concatenate(f32[4,1024]{1,0} %collective-permute.24, f32[1024,1024]{1,0} %parameter.2, f32[4,1024]{1,0} %collective-permute.23), dimensions={0}, metadata={op_type="concatenate" op_name="pmap(simulate_until_output)/concatenate[ dimension=0 ]" source_file="wave_equation.py" source_line=60}
  %tuple.324 = (s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) tuple(s32[] %copy.22, f32[1032,1024]{1,0} %concatenate.14, f32[1032,1024]{1,0} %concatenate.25)
  %while.40 = (s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) while((s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) %tuple.324), condition=%cond_computation__1.565.clone.clone, body=%body_computation__1.511.clone.clone.clone, backend_config="{\"known_trip_count\":{\"n\":\"8192\"}}"
  %get-tuple-element.745 = f32[1032,1024]{1,0} get-tuple-element((s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) %while.40), index=1, metadata={op_type="while" op_name="pmap(simulate_until_output)/scan/while[ body_nconsts=0\n                                        cond_nconsts=0 ]" source_file="wave_equation.py" source_line=97}
  %slice.356 = f32[1024,1024]{1,0} slice(f32[1032,1024]{1,0} %get-tuple-element.745), slice={[4:1028], [0:1024]}, metadata={op_type="gather" op_name="pmap(simulate_until_output)/gather[ dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(), start_index_map=(0,))\n                                    indices_are_sorted=True\n                                    slice_sizes=(1024, 1024)\n                                    unique_indices=True ]" source_file="wave_equation.py" source_line=155}
  %get-tuple-element.746 = f32[1032,1024]{1,0} get-tuple-element((s32[], f32[1032,1024]{1,0}, f32[1032,1024]{1,0}) %while.40), index=2, metadata={op_type="while" op_name="pmap(simulate_until_output)/scan/while[ body_nconsts=0\n                                        cond_nconsts=0 ]" source_file="wave_equation.py" source_line=97}
  %slice.357 = f32[1024,1024]{1,0} slice(f32[1032,1024]{1,0} %get-tuple-element.746), slice={[4:1028], [0:1024]}, metadata={op_type="gather" op_name="pmap(simulate_until_output)/gather[ dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(), start_index_map=(0,))\n                                    indices_are_sorted=True\n                                    slice_sizes=(1024, 1024)\n                                    unique_indices=True ]" source_file="wave_equation.py" source_line=155}
  ROOT %tuple.596 = (f32[1024,1024]{1,0}, f32[1024,1024]{1,0}) tuple(f32[1024,1024]{1,0} %slice.356, f32[1024,1024]{1,0} %slice.357)
}

